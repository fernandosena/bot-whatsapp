version: '3.8'

##############################################
# WhatsApp Business SaaS - Docker Compose
# Ambiente de desenvolvimento completo
# Autor: Desenvolvimento
# Data: 19/10/2025
##############################################

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: whatsapp-saas-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-admin123}
      MONGO_INITDB_DATABASE: whatsapp_business
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
    networks:
      - whatsapp-saas-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: whatsapp-saas-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - whatsapp-saas-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: whatsapp-saas-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # MongoDB
      MONGODB_URI: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-admin123}@mongodb:27017
      MONGODB_DB: whatsapp_business

      # JWT
      SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 15
      REFRESH_TOKEN_EXPIRE_DAYS: 30

      # Redis
      REDIS_URL: redis://redis:6379/0

      # URLs
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      BACKEND_URL: ${BACKEND_URL:-http://localhost:8000}
      ALLOWED_ORIGINS: ${FRONTEND_URL:-http://localhost:3000}

      # Payments (configure com suas credenciais reais)
      MERCADOPAGO_ACCESS_TOKEN: ${MERCADOPAGO_ACCESS_TOKEN:-}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-}
      PAYPAL_CLIENT_ID: ${PAYPAL_CLIENT_ID:-}
      PAYPAL_CLIENT_SECRET: ${PAYPAL_CLIENT_SECRET:-}
      PAYPAL_MODE: ${PAYPAL_MODE:-sandbox}

      # Environment
      ENVIRONMENT: development
      DEBUG: "True"
    volumes:
      - ./backend:/app
      - backend-logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - whatsapp-saas-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend (Next.js)
  frontend:
    build:
      context: ./web/frontend
      dockerfile: Dockerfile.dev
    container_name: whatsapp-saas-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: ${BACKEND_URL:-http://localhost:8000}
      NEXTAUTH_URL: ${FRONTEND_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-generate-a-secret-key}
    volumes:
      - ./web/frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - whatsapp-saas-network
    command: npm run dev

  # Mongo Express (opcional - interface web para MongoDB)
  mongo-express:
    image: mongo-express:latest
    container_name: whatsapp-saas-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USER:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-admin123}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-admin123}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-admin123}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - whatsapp-saas-network
    profiles:
      - tools  # SÃ³ inicia se especificado: docker-compose --profile tools up

networks:
  whatsapp-saas-network:
    driver: bridge

volumes:
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
  redis-data:
    driver: local
  backend-logs:
    driver: local
